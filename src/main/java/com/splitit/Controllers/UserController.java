package com.splitit.Controllers;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.CrudRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.splitit.Models.Request;
import com.splitit.Models.User;
import com.splitit.Repository.UserRepository;

@RestController
@RequestMapping(path = "/users") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	UserController(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	@CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody HttpStatus addNewUser(@RequestBody RegisterData data) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(data.getName());
		n.setPassword(data.getPassword());
		n.setRole(data.getRole());
		userRepository.saveAndFlush(n);
		return HttpStatus.ACCEPTED;	
	}
	

	@CrossOrigin(origins = "http://localhost:3000")
	@GetMapping("/{id}")
	public User findById(@PathVariable final Long id) {
        return userRepository.getOne(id);
    }

	@CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path = { "/loginAdmin" })
	public HttpStatus loginAdmin( Long id, String password) {
		User user; 
		if(findById(id) == null) {
			return HttpStatus.FORBIDDEN;
		}
		else
			if(findById(id).getRole() == false) {
				return HttpStatus.UNAUTHORIZED;
			}	
			else
				if(findById(id).getPassword() != password) {
					return HttpStatus.BAD_REQUEST;
				}	

				else 
					return HttpStatus.ACCEPTED;	

	}


	@CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path = { "/loginStaff" })
	public HttpStatus loginStaff( Long id, String password) {
		User user; 
		if(findById(id) == null) {
			return HttpStatus.FORBIDDEN;
		}
		else
			if(findById(id).getPassword() != password) {
				return HttpStatus.BAD_REQUEST;
			}	

			else 
				return HttpStatus.ACCEPTED;	

	}
}
