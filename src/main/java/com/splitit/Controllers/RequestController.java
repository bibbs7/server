package com.splitit.Controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.CrudRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.Optional;

import javax.persistence.Entity;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.Response.Status;

import com.splitit.Models.Request;
import com.splitit.Models.RequestData;
import com.splitit.Models.User;
import com.splitit.Repository.RequestRepository;

@RestController
@ResponseBody
@RequestMapping(path = "/request") // This means URL's start with /demo (after Application path)
public class RequestController<ImModel> {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private RequestRepository requestRepository;

	RequestController(RequestRepository requestRepository) {
		this.requestRepository = requestRepository;
	}

    @CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody HttpStatus addNewUser(@RequestBody RequestData data) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means 1111111111111111111111111it is a parameter from the GET
		// or POST request

		/*if (findById(data.getTableId()) != null) {
			return Response.status(Status.FORBIDDEN);
		}*/
		Request r = new Request();
		r.setStaffId(data.getstaffId());
		r.setProductId(data.getProductId());
		r.setSeatId(data.getSeatId());
		r.setTableId(data.getTableId());
		r.setStatus(data.getStatus());
		return HttpStatus.CREATED;
		//return  Response.status(Status.CREATED);
		
		
	}

    @CrossOrigin(origins = "http://localhost:3000")
	@GetMapping("/{id}")
	public Optional<Request> findById(@PathVariable final long id) {
        return requestRepository.findById(id);
    	}

    @CrossOrigin(origins = "http://localhost:3000")

	@PutMapping(value="/{id}")
  public ResponseEntity<Request> closeRequest(@PathVariable("id") long id,
                                        @RequestBody Request request){
    return requestRepository.findById(id)
        .map(record -> {
            record.setStatus(request.getStatus());
            Request updated = requestRepository.saveAndFlush(record);
            return ResponseEntity.ok().body(updated);
        }).orElse(ResponseEntity.notFound().build());
  }
}



